// <auto-generated />
using System.Collections.Generic;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Cluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClusterNameInKubernetes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ClusterNameInKubernetes");

                    b.Property<bool>("RecoveryFromBackup")
                        .HasColumnType("boolean")
                        .HasColumnName("RecoveryFromBackup");

                    b.Property<int?>("SecurityGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("SecurityGroupId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SystemName");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("WorkspaceId");

                    b.HasKey("Id");

                    b.HasIndex("SecurityGroupId");

                    b.HasIndex("SystemName")
                        .IsUnique();

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("Core.Entities.ClusterConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackupMethod")
                        .HasColumnType("text")
                        .HasColumnName("BackupMethod");

                    b.Property<string>("BackupScheduleCronExpression")
                        .HasColumnType("text")
                        .HasColumnName("BackupScheduleCronExpression");

                    b.Property<int>("ClusterId")
                        .HasColumnType("integer")
                        .HasColumnName("ClusterId");

                    b.Property<int>("Cpu")
                        .HasColumnType("integer")
                        .HasColumnName("Cpu");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DatabaseName");

                    b.Property<int>("Instances")
                        .HasColumnType("integer")
                        .HasColumnName("Instances");

                    b.Property<string>("LcCollate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LcCollate");

                    b.Property<string>("LcCtype")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LcCtype");

                    b.Property<int>("MajorVersion")
                        .HasColumnType("integer")
                        .HasColumnName("MajorVersion");

                    b.Property<int>("Memory")
                        .HasColumnType("integer")
                        .HasColumnName("Memory");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OwnerName");

                    b.Property<string>("OwnerPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OwnerPassword");

                    b.Property<Dictionary<string, string>>("Parameters")
                        .HasColumnType("hstore")
                        .HasColumnName("Parameters");

                    b.Property<int?>("PoolerDefaultPoolSize")
                        .HasColumnType("integer")
                        .HasColumnName("PoolerDefaultPoolSize");

                    b.Property<int?>("PoolerMaxConnections")
                        .HasColumnType("integer")
                        .HasColumnName("PoolerMaxConnections");

                    b.Property<string>("PoolerMode")
                        .HasColumnType("text")
                        .HasColumnName("PoolerMode");

                    b.Property<int>("StorageSize")
                        .HasColumnType("integer")
                        .HasColumnName("StorageSize");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique();

                    b.ToTable("ClusterConfigurations");
                });

            modelBuilder.Entity("Core.Entities.SecurityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("AllowedIps")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("AllowedIps");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("WorkspaceId");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("SecurityGroup");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Workspace");
                });

            modelBuilder.Entity("Core.Entities.WorkspaceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Role");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("UserId", "WorkspaceId")
                        .IsUnique();

                    b.ToTable("WorkspaceUser");
                });

            modelBuilder.Entity("Core.Entities.Cluster", b =>
                {
                    b.HasOne("Core.Entities.SecurityGroup", "SecurityGroup")
                        .WithMany()
                        .HasForeignKey("SecurityGroupId");

                    b.HasOne("Core.Entities.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityGroup");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Core.Entities.ClusterConfiguration", b =>
                {
                    b.HasOne("Core.Entities.Cluster", "Cluster")
                        .WithOne("Configuration")
                        .HasForeignKey("Core.Entities.ClusterConfiguration", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Core.Entities.SecurityGroup", b =>
                {
                    b.HasOne("Core.Entities.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Core.Entities.Workspace", b =>
                {
                    b.HasOne("Core.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Core.Entities.WorkspaceUser", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("WorkspaceUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Workspace", "Workspace")
                        .WithMany("WorkspaceUsers")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Core.Entities.Cluster", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("WorkspaceUsers");
                });

            modelBuilder.Entity("Core.Entities.Workspace", b =>
                {
                    b.Navigation("WorkspaceUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
